function ur10 = ur10robot()

    ur10 = mdl_ur10();
    ur10.base.t = [1;1;0];

end

function r = mdl_ur10()
    
    deg = pi/180;
    
    % robot length values (metres)
    a = [0, -0.612, -0.5723, 0, 0, 0]';

    d = [0.1273, 0, 0, 0.163941, 0.1157, 0.0922]';

    alpha = [1.570796327, 0, 0, 1.570796327, -1.570796327, 0]';

    theta = zeros(6,1);
    
    DH = [theta d a alpha];

    mass = [7.1, 12.7, 4.27, 2.000, 2.000, 0.365];

    center_of_mass = [
        0.021, 0, 0.027
        0.38, 0, 0.158
        0.24, 0, 0.068
        0.0, 0.007, 0.018
        0.0, 0.007, 0.018
        0, 0, -0.026  ];    
    
    % and build a serial link manipulator
    
    % offsets from the table on page 4, "Mico" angles are the passed joint
    % angles.  "DH Algo" are the result after adding the joint angle offset.

    robot = SerialLink(DH, ...
        'name', 'UR10', 'manufacturer', 'Universal Robotics');
    
    % add the mass data, no inertia available
    links = robot.links;
    for i=1:6
        links(i).m = mass(i);
        links(i).r = center_of_mass(i,:);
    end

    
    % place the variables into the global workspace
    if nargin == 1
        r = robot;
    elseif nargin == 0
        assignin('caller', 'ur10', robot);
        assignin('caller', 'qz', [0 0 0 0 0 0]); % zero angles
        assignin('caller', 'qr', [180 0 0 0 90 0]*deg); % vertical pose as per Fig 2
    end
    r = robot;
end